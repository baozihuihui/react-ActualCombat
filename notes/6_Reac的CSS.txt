1、内联样式
<span style={{ backgroundColor:red,fontSize:12 }}/>
内联样式是官方推荐的一种css样式的写法：
    style 接受一个采用小驼峰命名属性的JavaScript 对象，而不是CSS 字符串；
    并且可以引用state中的状态来设置相关的样式；
内联样式的优点:
    1.内联样式,样式之间不会有冲突
    2.可以动态获取当前state中的状态
内联样式的缺点：
    1.写法上都需要使用驼峰标识
    2.某些样式没有提示
    3.大量的样式,代码混乱
    4.某些样式无法编写(比如伪类/伪元素)
所以官方依然是希望内联合适和普通的css来结合编写；

2、普通的css文件
普通的css我们通常会编写到一个单独的文件，之后再进行引入。
这样的编写方式和普通的网页开发中编写方式是一致的：
    如果我们按照普通的网页标准去编写，那么也不会有太大的问题；
    但是组件化开发中我们总是希望组件是一个独立的模块，即便是样式也只是在自己内部生效，不会相互影响；
    但是普通的css都属于全局的css，样式之间会相互影响；
这种编写方式最大的问题是样式之间会相互层叠掉；

3、css modules
React的脚手架已经内置了css modules的配置：
    .css/.less/.scss等样式文件都修改成.module.css/.module.less/.module.scss等；
    之后就可以引用并且进行使用了；
css modules确实解决了局部作用域的问题，也是很多人喜欢在React中使用的一种方案。
但是这种方案也有自己的缺陷：
    引用的类名，不能使用连接符(.home-title)，在JavaScript中是不识别的；
    所有的className都必须使用{style.className}的形式来编写；
    不方便动态来修改某些样式，依然需要使用内联样式的方式；

4、CSS in JS
CSS-in-JS”是指一种模式，其中CSS 由JavaScript 生成而不是在外部文件中定义；
事实上CSS-in-JS的模式就是一种将样式（CSS）也写入到JavaScript中的方式，并且可以方便的使用JavaScript的状态；

认识styled-components
官网：https://styled-components.com
CSS-in-JS通过JavaScript来为CSS赋予一些能力，包括类似于CSS预处理器一样的样式嵌套、函数定义、逻辑复用、动态修改状态等等；
CSS预处理器也具备某些能力，但是获取动态状态依然是一个不好处理的点；

styled-Components 通过创建 react-element，代替基础DOM组件，解决了动态引入以及命名空的问题，
同时因为CSS是由JS动态生成的，这样也能保证编写的CSS一定是最后生效的样式，不会被覆盖。

安装引入 styled-components
    npm install styled-components
    推荐安装vscode-styled-components 这个插件，能让模板字符串中CSS部分进行高亮和只能提示

标签模板字符串可以直接作为函数参数调用函数
function test(...args){
    console.log(args);
}

test`my name is ${()=>('haha')},this is a test!` 
 
 输出
 (2) [Array(2), ƒ]
        0: (2) ["my name is ", ",this is a test!", raw: Array(2)]
        1: ()=>('haha')

这就是styled-compoments 可以执行的原理

import Componets from 'react'
import * as styled from 'styled-compoments'

const NoMarginDiv = style.div`
    margin:0;
    background:${ props => (props.color) }
`;

function App(){
    return ( 
        <NoMarginDiv color = { "red" } >
            这是一个没有外边距且颜色为红色的DIV
        </NoMarginDiv>
    )
}

但它也有自己不好解决的问题
1、修改第三方组件样式，给被包裹的第三方组件传递多余props
    因为style-components包裹实际是一个HOC，这时候会透穿所有的props。
    那么这时候就会出现，我们传递给style用作动态生成css的props也传给了被包裹组件，那就有可能出现异常

修改第三方组件样式(不推荐)
方案一：通过子类选择器以及className协助修改，但是这样就定义了一个全局的className,那么就有可能被污染。
    import Components from 'react'
    import {Button} from 'antd'
    import style from 'style-components'

    const Test = style.div`
        // 直接使用子类选择器
        >.testButton:hover{
            width:100px;
        }
    `
    function Test(){
        return (
            <Test>
                <Button className={'testButton'}>hover时变大</Button>
            </Test>

        )
    }

修改第三方样式，且透传同类型字段
方案二：通过style包裹,提前移除自定义属性
    import Components from 'react'
    import {Button} from 'antd'
    import style from 'style-components'

    const TestButton = style(({active,...otherProps})=>(<Button {...otherProps}/>))`
       color:${({active})=> (active?'red':'blue')}
    `
    function Test(){
        return (
                <TestButton $active={active}>点击时变红</TestButton>
        )
    }
方案三：利用 style-compoments 的 临时属性
    import Components from 'react'
    import {Button} from 'antd'
    import style from 'style-components'

    const TestButton = style(Button)`
       color:${ ($active)=> ( $active ? 'red' : 'blue' ) }
    `
    function Test(){
        return (
                <TestButton $active={active} active >点击时变红</TestButton>
        )
    }






